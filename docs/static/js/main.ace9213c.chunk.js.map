{"version":3,"sources":["assets/img/twitter-logo.png","components/Header/Header.js","components/ModalContainer/ModalContainer.js","components/FormSendTweet/FormSendTweet.js","utils/constans.js","components/SendTweet/SendTweet.js","components/Tweet/Tweet.js","components/ListTweets/ListTweets.js","App.js","index.js"],"names":["Header","className","src","TwitterLogo","alt","ModalContainer","isOpenModal","closeModal","children","Modal","open","onClose","closeAfterTransition","FormSendTweet","sendTweet","useState","name","tweet","formValue","setFormValue","onFormChange","event","target","value","trim","onSubmit","FormControl","FormGroup","TextField","type","placeholder","margin","onChange","multiline","rows","Button","TWEETS_STORAGE","SendTweet","setToastProps","allTweets","setIsOpenModal","Fab","color","aria-label","onClick","preventDefault","allTweetsArray","time","moment","push","localStorage","setItem","JSON","stringify","text","Tweet","index","deleteTweet","Card","CardContent","format","ListTweets","length","map","App","toastProps","setAllTweets","reloadTweets","setReloadTweets","useEffect","allTweetsStorage","parse","getItem","Container","maxWidth","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ace9213c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.b413b75b.png\";","import React from 'react';\r\n\r\nimport TwitterLogo from '../../assets/img/twitter-logo.png';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => (\r\n    <div className=\"header\">\r\n        <img src={ TwitterLogo } alt=\"Tweets Simulator\" />\r\n        <h1>Tweets Simulator</h1>\r\n    </div>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Modal } from '@material-ui/core';\r\n\r\nimport './ModalContainer.scss';\r\n\r\n\r\nconst ModalContainer = ({ isOpenModal, closeModal, children }) => (\r\n    <Modal\r\n        className=\"modal-container\"\r\n        open={ isOpenModal }\r\n        onClose={ closeModal }\r\n        closeAfterTransition\r\n    >\r\n        <div>{ children }</div>\r\n    </Modal>\r\n);\r\n\r\nModalContainer.propTypes = {\r\n    isOpenModal: PropTypes.bool.isRequired,\r\n    closeModal: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ModalContainer;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { FormControl, FormGroup, TextField, Button } from '@material-ui/core';\r\n\r\nimport './FormSendTweet.scss';\r\n\r\nconst FormSendTweet = ({ sendTweet }) => {\r\n\r\n    const [ formValue, setFormValue ] = useState({\r\n        name: '',\r\n        tweet: ''\r\n    });\r\n\r\n    const onFormChange = event => setFormValue({\r\n        ...formValue,\r\n        [event.target.name]: event.target.value.trim()\r\n    });\r\n\r\n    return (\r\n        <div className=\"form-send-tweet\">\r\n            <h2 className=\"form-send-tweet__title\">Enviar Tweet</h2>\r\n            <form\r\n                className=\"form-send-tweet__form\"\r\n                onSubmit={ event => sendTweet( event, formValue ) }\r\n            >\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField \r\n                            className=\"form-send-tweet__form-name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Nombre del usuario\"\r\n                            margin=\"normal\"\r\n                            onChange={ onFormChange }\r\n                        />\r\n                    </FormGroup>\r\n                    \r\n                    <FormGroup>\r\n                        <TextField\r\n                            className=\"form-send-tweet__form-textarea\"\r\n                            name=\"tweet\"\r\n                            multiline\r\n                            rows=\"6\"\r\n                            placeholder=\"Escribe tu tweet...\"\r\n                            margin=\"normal\"\r\n                            onChange={ onFormChange }\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Button\r\n                            type=\"submit\"\r\n                        >Enviar Tweet</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nFormSendTweet.propTypes = {\r\n    sendTweet: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FormSendTweet;","export const TWEETS_STORAGE = 'tweet-lt';","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Fab } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport moment from 'moment';\r\n\r\nimport ModalContainer from '../ModalContainer';\r\nimport FormSendTweet from '../FormSendTweet';\r\nimport { TWEETS_STORAGE } from '../../utils/constans';\r\n\r\nimport './SendTweet.scss';\r\n\r\nconst SendTweet = ({ setToastProps, allTweets }) => {\r\n\r\n    const [ isOpenModal, setIsOpenModal ] = useState( false );\r\n\r\n    const openModal = () => setIsOpenModal( true );\r\n\r\n    const closeModal = () => setIsOpenModal( false );\r\n\r\n    const sendTweet = ( event, formValue ) => {\r\n        event.preventDefault();\r\n\r\n        const { name, tweet } = formValue;\r\n\r\n        let allTweetsArray = [];\r\n        \r\n        if( allTweets ) { allTweetsArray = allTweets; }\r\n\r\n        if( !name || !tweet ) {\r\n            setToastProps({\r\n                open: true,\r\n                text: 'WARNING: Todos los campos son obligatorios'\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        formValue.time = moment();\r\n        allTweetsArray.push( formValue );\r\n\r\n        localStorage.setItem( TWEETS_STORAGE, JSON.stringify( allTweetsArray ) );\r\n\r\n        allTweetsArray = [];\r\n\r\n        setToastProps({\r\n            open: true,\r\n            text: 'Tweet envidado correctamente'\r\n        });\r\n\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <div className=\"send-tweet\">\r\n            <Fab\r\n                className=\"send-tweet__open-modal\"\r\n                color=\"primary\"\r\n                aria-label=\"add\"\r\n                onClick={ openModal }\r\n            >\r\n                <AddIcon />\r\n            </Fab>\r\n\r\n            <ModalContainer\r\n                isOpenModal={ isOpenModal }\r\n                closeModal={ closeModal }\r\n            >\r\n                <FormSendTweet\r\n                    sendTweet={ sendTweet }\r\n                />\r\n            </ModalContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nSendTweet.propTypes = {\r\n    setToastProps: PropTypes.func.isRequired,\r\n    allTweets: PropTypes.array.isRequired\r\n}\r\n\r\nexport default SendTweet;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Card, CardContent } from '@material-ui/core';\r\nimport DeleteTwoToneIcon from '@material-ui/icons/DeleteTwoTone';\r\nimport moment from 'moment';\r\n\r\nimport './Tweet.scss';\r\n\r\nconst Tweet = ({ name, tweet, time , index, deleteTweet }) => (\r\n    <Card className=\"tweet\">\r\n        <CardContent>\r\n            <div className=\"tweet__header\">\r\n                <h5>{ name }</h5>\r\n                \r\n                <DeleteTwoToneIcon\r\n                    onClick={ () => deleteTweet( index ) }\r\n                />\r\n            </div>\r\n            \r\n            <p>{ tweet }</p>\r\n            \r\n            <div className=\"tweet__date-add-tweet\">\r\n                { moment( time ).format( 'DD/MM/YYYY HH:mm' ) }\r\n            </div>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nTweet.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    tweet: PropTypes.string.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    deleteTweet: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Tweet;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Tweet from '../Tweet';\r\n\r\nimport './ListTweets.scss';\r\n\r\n\r\nconst ListTweets = ({ allTweets, deleteTweet }) => {\r\n\r\n    if( allTweets.length === 0 ) {\r\n        return (\r\n            <div className=\"list-tweets-empty\">\r\n                <h2>No hay Tweets...</h2>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"list-tweets\"\r\n        >\r\n            {\r\n                allTweets.map( ( tweet, index ) => (\r\n                    <div\r\n                        className=\"list-tweets__tweet\"\r\n                        key={ index }\r\n                    >\r\n                        <Tweet\r\n                            { ...tweet }\r\n                            index={ index }\r\n                            deleteTweet={ deleteTweet }\r\n                        />\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nListTweets.propTypes = {\r\n    allTweets: PropTypes.array.isRequired,\r\n    deleteTweet: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListTweets;","import React, { useState, useEffect } from 'react';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Header from './components/Header';\r\nimport SendTweet from './components/SendTweet';\r\nimport ListTweets from './components/ListTweets';\r\n\r\nimport { TWEETS_STORAGE } from './utils/constans';\r\n\r\nfunction App() {\r\n\r\n\tconst [ toastProps, setToastProps ] = useState({\r\n\t\topen: false,\r\n\t\ttext: null\r\n\t});\r\n\r\n\tconst { open, text } = toastProps;\r\n\r\n\tconst [ allTweets, setAllTweets ] = useState( [] );\r\n\r\n\tconst [ reloadTweets, setReloadTweets ] = useState( false );\r\n\r\n\tuseEffect( () => {\r\n\r\n\t\tconst allTweetsStorage = JSON.parse( localStorage.getItem( TWEETS_STORAGE ) ) || [];\r\n\t\tsetAllTweets( allTweetsStorage );\r\n\t\tsetReloadTweets( false );\r\n\r\n\t}, [reloadTweets] );\r\n\r\n\tconst deleteTweet = ( index ) => {\r\n\t\tallTweets.splice( index, 1 );\r\n\t\tsetAllTweets( allTweets );\r\n\t\tlocalStorage.setItem( TWEETS_STORAGE, JSON.stringify( allTweets ) );\r\n\t\tsetReloadTweets( true );\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container className=\"tweets-simulator\" maxWidth={ false }>\r\n\t\t\t<Header />\r\n\r\n\t\t\t<SendTweet\r\n\t\t\t\tsetToastProps={ setToastProps }\r\n\t\t\t\tallTweets={ allTweets }\r\n\t\t\t/>\r\n\r\n\t\t\t<ListTweets\r\n\t\t\t\tallTweets={ allTweets }\r\n\t\t\t\tdeleteTweet={ deleteTweet }\r\n\t\t\t/>\r\n\r\n\t\t\t<Snackbar\r\n\t\t\t\tanchorOrigin={{ \r\n\t\t\t\t\tvertical:'top',\r\n\t\t\t\t\thorizontal: 'right'\r\n\t\t\t\t}}\r\n\t\t\t\topen={ open }\r\n\t\t\t\tautoHideDuration={ 1000 }\r\n\t\t\t\tmessage={ <span id=\"message-id\" >{ text }</span> }\r\n\t\t\t/>\r\n\t\t</Container>\r\n\t);\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}